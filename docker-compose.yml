version: '3.3'

# Define services
services:
 
 zookeeper:
    image: wurstmeister/zookeeper
    restart: always
    container_name: zookeeper
    ports:
     - 2181:2181
    volumes:
     - zookeeper_data:/data
     - zookeeper_datalog:/datalog

 kafka:    
    image: wurstmeister/kafka
    restart: always
    container_name: kafka
    ports:
     - 9092:9092
    environment:
        KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092
        KAFKA_LISTENERS: INSIDE://kafka:9092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
        KAFKA_CREATE_TOPICS: "entity:2:1,value:2:1" #2 partitions, 1 replica 
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
        KAFKA_LOG_RETENTION_HOURS: 24
        KAFKA_LOG_RETENTION_BYTES: 1073741824 #1GB
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
     - kafka_data:/var/lib/kafka/data      
    depends_on:
     - zookeeper
 db:
    image: mysql:latest
    ports:
     - 3306:3306
    restart: always
    environment:
      MYSQL_DATABASE: buses
      MYSQL_USER: root
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
    volumes:
      - db_data:/var/lib/mysql
  # App backend service
 app-server:
    # Configuration for building the docker image for the backend service
    build: ./future-traffic
    ports:
      - 8080:8080 # Forward the portsd port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on: 
     - db 
  # Frontend Service 
 app-client:
    build:
     context: ./frontend
     dockerfile: Dockerfile
    ports:
     - 3000:3000 
    restart: always
    depends_on:
      - app-server


  # Database Service (Mysql)

# Volumes
volumes:
  db_data: {}
  kafka_data: {}
  zookeeper_data: {}
  zookeeper_datalog: {}
